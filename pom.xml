<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.hiwepy</groupId>
	<artifactId>metrics-biz</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:https:github.com/vindell/${project.artifactId}.git</connection>
		<developerConnection>scm:git:https:github.com/vindell/${project.artifactId}.git</developerConnection>
		<url>https:github.com/vindell/${project.artifactId}</url>
		<tag>${project.artifactId}</tag>
	</scm>

	<developers>
		<developer>
			<name>wandl</name>
			<email>hnxyhcwdl1003@163.com</email>
			<roles>
				<role>developer</role>
			</roles>
			<timezone>+8</timezone>
		</developer>
	</developers>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Maven Snapshots Repository</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
		    <id>ossrh</id>
			<name>Maven Central Staging Repository</name>
		    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		  </repository>
	</distributionManagement>
	
	<build>
		<pluginManagement>
			<plugins>
				<!-- 编译插件：编译主代码至主输出目录 -->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.6.1</version> 
					<!-- 设置源文件编码方式 -->  
					<configuration>
						<defaultLibBundleDir>lib</defaultLibBundleDir>
						<!-- 源代码编译版本 -->
						<source>1.7</source>
						<!-- 目标平台编译版本 -->
						<target>1.7</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!--  -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- 资源插件：复制主资源文件至主输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<!-- 解决资源文件的编码问题 -->  
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
					<!-- 复制测试资源文件至测试输出目录复制resources到classess -->
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/classes</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
										<!-- <filtering>true</filtering> -->
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>3.0.4</version>
					<executions>
						<execution>
							<phase>verify</phase>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- 单元测试插件 ：执行测试用例-->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!--
							forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
							pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
							once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
						 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8</argLine> 
						<additionalClasspathElements> 
			                <additionalClasspathElement>${basedir}/target/test-classes</additionalClasspathElement>  
			            </additionalClasspathElements>  
			            <includes>  
			                <include>**/*Test.java</include> 
			            </includes> 
                        <excludes>
                            <exclude>**/TestBean.java</exclude>
                        </excludes>
					</configuration>					
				</plugin>
				<!-- jar包生成插件 ：创建项目jar包--> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-jar-plugin</artifactId>  
					<version>3.0.2</version>  
					<configuration> 
						<encoding>${project.build.sourceEncoding}</encoding>
						<skipIfEmpty>true</skipIfEmpty> 
	                    <archive>  
                    	 	<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
							<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖  -->
							<!-- <manifestEntries>
								<addClasspath>true</addClasspath>  
	                            <classpathPrefix>lib/</classpathPrefix>  
								<Main-Class>.....Main</Main-Class>
								<Premain-Class>.....Main</Premain-Class>
								<Agent-Class>.....Main</Agent-Class>
							</manifestEntries> -->
	                    </archive>  
	                </configuration>  
				</plugin> 
				<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-install-plugin</artifactId>  
					<version>2.5.2</version>  
				</plugin> 
				<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-deploy-plugin</artifactId>  
		            <version>2.8.2</version>  
		        </plugin>
				<!-- 源码插件:发布时自动将源码同时发布 -->				
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-source-plugin</artifactId>
					 <version>3.0.1</version> 
					 <!-- 打包source文件为jar文件 -->
					 <configuration>  
					 	 <testFailureIgnore>true</testFailureIgnore>
					 	 <!-- 打包源码一起发布到maven仓库中 -->
	                     <attach>true</attach>  
	                     <encoding>${project.build.sourceEncoding}</encoding>  
	                 </configuration> 
					 <executions>
						 <execution>
							 <id>attach-sources</id>
							 <phase>package</phase>
							 <goals>
							 	<!-- 
								 	jar-no-fork与jar的区别
									jar，在执行goal之前，执行generate-sources阶段，也就是说，如果，jar绑定的目标在generate-sources之后(比如verify)的话，generate-sources会执行两遍。
									jar-no-fork，没有其余动作，在绑定的phase执行。
								 -->
								<!-- <goal>jar</goal> -->
								<goal>jar-no-fork</goal>
							 </goals>
						 </execution>
					 </executions>
				</plugin>
				<!-- 文档插件:发布时自动生成文档 -->	
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-javadoc-plugin</artifactId>  
		            <version>2.10.4</version> 
					<configuration>  
	                    <aggregate>true</aggregate>  
	                    <argLine>-Dfile.encoding=UTF-8</argLine>
                       	<charset>${project.build.sourceEncoding}</charset> 
                        <encoding>${project.build.sourceEncoding}</encoding> 
                        <docencoding>${project.build.sourceEncoding}</docencoding> 
	                </configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>				
		        </plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 编译插件：编译主代码至主输出目录 -->  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin> 
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-jar-plugin</artifactId>  
			</plugin> 
			<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-install-plugin</artifactId>  
			</plugin> 
			<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-deploy-plugin</artifactId>  
	        </plugin>	
			<!-- 源码插件:发布时自动将源码同时发布 -->				
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-source-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<ehcache.version>2.10.4</ehcache.version>
		<ehcache-core.version>2.6.11</ehcache-core.version>
		<metrics.version>4.1.1</metrics.version>
 		<junit.version>4.12</junit.version>
 		<servlet-api.version>3.0.1</servlet-api.version>
 		<slf4j.version>1.7.21</slf4j.version>
 		<spring.version>4.3.11.RELEASE</spring.version><!-- 4.3.x（JDK 1.7 ）、4.1.x（JDK 1.6）、4.0.x（JDK 1.6） -->
 		<metrics-statsd.version>3.0.1</metrics-statsd.version>
	</properties>
	
	<dependencyManagement>
		<dependencies>
		
			<!-- ######################测试工具包###################### -->
			
			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			
			<!-- ######################Servlet相关基础包###################### -->
			
			<!-- servlet 基础依赖包 -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api.version}</version>
			</dependency>
			
			<!-- ######################日志组件工具包###################### -->
			
			<!-- SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样
			 的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<!-- ###################### Spring 4.x 核心框架  ###################### -->
			
			<!-- Web支持包，包括客户端和web的远程访问 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- ###################### Metrics 3.x ###################### -->
			
			<!-- Metrics is a Java library which gives you unparalleled insight into 
				what your code does in production. Metrics provides a powerful toolkit of 
				ways to measure the behavior of critical components in your production environment. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-core</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A dependency-less package of just the annotations used by other Metrics  modules. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-annotation</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An addition to Metrics which provides the ability to run application-specific 
				health checks, allowing you to check your application's heath in production. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-healthchecks</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			
			<!-- A set of classes which allow you to monitor critical aspects of your 
				Java Virtual Machine using Metrics. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jvm</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An Apache HttpClient wrapper providing Metrics instrumentation of connection pools, request durations and rates, and other useful information. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-httpclient</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An Apache HttpAsyncClient wrapper providing Metrics instrumentation of connection pools, request durations and rates, and other useful information. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-httpasyncclient</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An instrumented filter for servlet environments. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-servlet</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An Ehcache wrapper providing Metrics instrumentation of caches. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-ehcache</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- Metrics Integration for JCache, JSR 107 standard for caching. Uses the CacheStatisticsMXBean provided statistics. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jcache</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A set of Jackson modules which provide serializers for most Metrics  classes. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-json</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- HTTP报表
				 Metric也提供了一个servlet (AdminServlet)提供JSON风格的报表。
				   它还提供了单一功能的servlet (MetricsServlet, HealthCheckServlet, ThreadDumpServlet, PingServlet)。
 			-->
			<!-- A set of utility servlets for Metrics, allowing you to expose valuable  information about your production environment. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-servlets</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A reporter for Metrics which announces measurements to a Graphite server. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-graphite</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A reporter for Metrics which announces measurements to a Ganglia cluster. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-ganglia</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A set of class providing Metrics integration for Jersey, the reference 
				JAX-RS implementation. This module is for the old Jersey 1.x -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jersey</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A set of class providing Metrics integration for Jersey, the reference 
				JAX-RS implementation. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jersey2</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A set of extensions for Jetty 8 which provide instrumentation of 
				thread pools, connector metrics, and application latency and utilization. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jetty8</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A set of extensions for Jetty 9.1 and higher which provide instrumentation 
				of thread pools, connector metrics, and application latency and utilization. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jetty9</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A set of extensions for Jetty 9.0 which provide instrumentation of thread pools, connector metrics, and application latency and utilization. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jetty9-legacy</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- A JDBI wrapper providing Metrics instrumentation of query durations and rates. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-jdbi</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An instrumented appender for Logback. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-logback</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An instrumented appender for Log4j 1.x. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-log4j</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- An instrumented appender for Log4j 2.x. -->
			<dependency>
				<groupId>io.dropwizard.metrics</groupId>
				<artifactId>metrics-log4j2</artifactId>
				<version>${metrics.version}</version>
			</dependency>
			<!-- https://github.com/hengyunabc/metrics-kafka -->
			<dependency>
				<groupId>io.github.hengyunabc</groupId>
				<artifactId>metrics-kafka</artifactId>
				<version>0.0.1</version>
			</dependency>
			<dependency>
				<groupId>org.apache.kafka</groupId>
				<artifactId>kafka-clients</artifactId>
				<version>0.10.2.0</version>
			</dependency>
			<!-- https://github.com/hengyunabc/metrics-zabbix -->
			<dependency>
				<groupId>io.github.hengyunabc</groupId>
				<artifactId>metrics-zabbix</artifactId>
				<version>0.0.5</version>
			</dependency>
			<dependency>
				<groupId>io.github.hengyunabc</groupId>
				<artifactId>mybatis-ehcache-spring</artifactId>
				<version>0.0.1</version>
			</dependency>
			<dependency>
				<groupId>org.influxdb</groupId>
				<artifactId>influxdb-java</artifactId>
				<version>2.5</version>
			</dependency>
			
			<!-- Metrics + Hyperic Sigar for OS-level monitoring -->
			<!-- https://mvnrepository.com/artifact/com.github.cb372/metrics-sigar -->
			<dependency>
				<groupId>com.github.cb372</groupId>
				<artifactId>metrics-sigar</artifactId>
				<version>0.2.2</version>
			</dependency>
			
			<dependency>
				<groupId>com.github.davidb</groupId>
				<artifactId>metrics-influxdb</artifactId>
				<version>0.9.3</version>
			</dependency>
			
			<!-- 
				EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。Ehcache是一种广泛使用的开 源Java分布式缓存。
				主要面向通用缓存,Java EE和轻量级容器。它具有内存和磁盘存储，缓存加载器,缓存扩展，缓存异常处理程序，一个gzip缓存servlet过滤器，支持REST和SOAP api等特点。

				优点：
				1. 快速
				2. 简单
				3. 多种缓存策略
				4. 缓存数据有两级：内存和磁盘，因此无需担心容量问题
				5. 缓存数据会在虚拟机重启的过程中写入磁盘
				6. 可以通过RMI、可插入API等方式进行分布式缓存
				7. 具有缓存和缓存管理器的侦听接口
				8. 支持多缓存管理器实例，以及一个实例的多个缓存区域
				9. 提供Hibernate的缓存实现
				
				缺点：
				1. 使用磁盘Cache的时候非常占用磁盘空间：这是因为DiskCache的算法简单，该算法简单也导致Cache的效率非常高。它只是对元素直接追加存储。因此搜索元素的时候非常的快。如果使用DiskCache的，在很频繁的应用中，很快磁盘会满。
				2. 不能保证数据的安全：当突然kill掉java的时候，可能会产生冲突，EhCache的解决方法是如果文件冲突了，则重建cache。这对于Cache 数据需要保存的时候可能不利。当然，Cache只是简单的加速，而不能保证数据的安全。如果想保证数据的存储安全，可以使用Bekeley DB Java Edition版本。这是个嵌入式数据库。可以确保存储安全和空间的利用率。
				
				EhCache的分布式缓存有传统的RMI，1.5版的JGroups，1.6版的JMS。分布式缓存主要解决集群环境中不同的服务器间的数据的同步问题。
				
				使用Spring的AOP进行整合，可以灵活的对方法的返回结果对象进行缓存。
			 -->
			 <dependency>
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache</artifactId>
				<version>${ehcache.version}</version>
			</dependency>
			<dependency>
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache-core</artifactId>
				<version>${ehcache-core.version}</version>
			</dependency>
			
		</dependencies>

	</dependencyManagement>

	<repositories>
		<repository>
	        <id>sonatype</id>
	        <url>https://oss.sonatype.org/content/groups/public</url>
	        <releases>
	           <enabled>true</enabled>
	        </releases>
	        <snapshots>
	          <enabled>false</enabled>
	        </snapshots>
	     </repository>
	</repositories>

	<dependencies>
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- ###################### Spring 4.x 核心框架  ###################### -->
			
		<!-- Web支持包，包括客户端和web的远程访问 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- ###################### Metrics 3.x ###################### -->
			
		<dependency>
		    <groupId>io.dropwizard.metrics</groupId>
		    <artifactId>metrics-annotation</artifactId>
		</dependency>
		<dependency>
		    <groupId>io.dropwizard.metrics</groupId>
		    <artifactId>metrics-core</artifactId>
		</dependency>
		<dependency>
		    <groupId>io.dropwizard.metrics</groupId>
		    <artifactId>metrics-healthchecks</artifactId>
		</dependency>
				
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-jvm</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-servlets</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-servlet</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-ehcache</artifactId>
			<scope>provided</scope>
		</dependency>
				
		<!-- <dependency>
		    <groupId>org.tinygroup</groupId>
		    <artifactId>org.tinygroup.commons</artifactId>
		    <version>3.2.0</version>
		</dependency> -->
		
		<!-- https://github.com/cb372/metrics-sigar -->
		<dependency>
			<groupId>com.github.cb372</groupId>
			<artifactId>metrics-sigar</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>io.github.hengyunabc</groupId>
			<artifactId>metrics-kafka</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.izettle/metrics-influxdb -->
		<dependency>
		    <groupId>com.izettle</groupId>
		    <artifactId>metrics-influxdb</artifactId>
		    <version>1.1.8</version>
		    <scope>provided</scope>
		</dependency>
		<!-- https://github.com/davidB/metrics-influxdb -->
		<dependency>
			<groupId>com.github.davidb</groupId>
			<artifactId>metrics-influxdb</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.influxdb</groupId>
			<artifactId>influxdb-java</artifactId>
			<scope>provided</scope>
		</dependency>
		
		
	</dependencies>


</project>